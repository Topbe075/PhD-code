#Checking library size
library(readxl)

setwd("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Count matrix") 

file_list <- list.files(pattern = "*.txt")
all_data <- list()

for (file in file_list) {
    data <- read.table(file, header = FALSE, sep = " ", stringsAsFactors = FALSE)
    
    if (ncol(data) == 1) {
        data_split <- do.call(rbind, strsplit(data$V1, " "))
        data <- data.frame(Gene_ID = data_split[, 1], Count = as.numeric(data_split[, 2]), stringsAsFactors = FALSE)
    }
    
    rownames(data) <- data$Gene_ID
    data <- data[, -1]
    all_data[[file]] <- data
}

combined_data <- do.call(cbind, all_data)
colnames(combined_data) <- gsub(".txt", "", colnames(combined_data))

library_sizes <- colSums(combined_data)

sample_matrix <- read_excel("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Sample_matrix.xlsx")
sample_matrix <- sample_matrix[sample_matrix$SampleID %in% names(library_sizes), ]
library_sizes <- library_sizes[sample_matrix$SampleID]

barplot(library_sizes,
        las = 2,
        main = "Library Sizes per Sample",
        ylab = "Total Counts",
        col = "steelblue",
        cex.names = 0.7)

#Checking for batch effects
library(DESeq2)
library(readxl)

setwd("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Count matrix/Filtered counts")

file_list <- list.files(pattern = "*.txt")
all_data <- list()

for (file in file_list) {
    data <- read.table(file, header = FALSE, sep = " ", stringsAsFactors = FALSE)
    
    if (ncol(data) == 1) {
        data_split <- do.call(rbind, strsplit(data$V1, " "))
        data <- data.frame(Gene_ID = data_split[, 1], Count = as.numeric(data_split[, 2]), stringsAsFactors = FALSE)
    }
    
    rownames(data) <- data$Gene_ID
    data <- data[, -1]
    all_data[[file]] <- data
}

combined_data <- do.call(cbind, all_data)
colnames(combined_data) <- gsub(".txt", "", colnames(combined_data))

sample_matrix <- read_excel("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Sample_matrix.xlsx")
sample_matrix <- sample_matrix[sample_matrix$SampleID %in% colnames(combined_data), ]
combined_data <- combined_data[, sample_matrix$SampleID]
stopifnot(all(colnames(combined_data) == sample_matrix$SampleID))

dds <- DESeqDataSetFromMatrix(countData = round(combined_data),
                              colData = sample_matrix,
                              design = ~ Batch)

dds <- dds[rowSums(counts(dds) >= 10) > 0, ] 

dds <- estimateSizeFactors(dds)

vst_data <- assay(vst(dds, blind = TRUE))

gene_vars <- apply(vst_data, 1, var)
vst_data_filtered <- vst_data[gene_vars > 0, ]
z_scaled_data <- t(scale(t(vst_data_filtered)))

pca_result <- prcomp(t(z_scaled_data))

batch_info <- sample_matrix$Batch
names(batch_info) <- sample_matrix$SampleID
batch_info <- batch_info[colnames(z_scaled_data)]

plot(pca_result$x[, 1], pca_result$x[, 2],
     xlab = "PC1", ylab = "PC2",
     main = "PCA with Batch Coloring (Z-score Normalized)",
     col = as.factor(batch_info), pch = 16)

legend("topright", legend = levels(as.factor(batch_info)),
       col = 1:length(levels(as.factor(batch_info))), pch = 16, cex = 0.7)

#Marking files for duplicates
INPUT_DIR="/HANGER/ben/Aligned_files_Bam"
OUTPUT_DIR="/HANGER/ben/marked_duplicates"
PICARD="/WORKSPACE/George/Tools/picard/build/libs/picard.jar"

mkdir -p "$OUTPUT_DIR"

for bam in "$INPUT_DIR"/*.bam; do
    filename=$(basename "$bam" .bam)

    marked_bam="$OUTPUT_DIR/${filename}.marked.bam"
    metrics_file="$OUTPUT_DIR/${filename}.metrics.txt"

    java -jar "$PICARD" MarkDuplicates \
        I="$bam" \
        O="$marked_bam" \
        M="$metrics_file" \
        REMOVE_DUPLICATES=false \
        ASSUME_SORTED=true \
        VALIDATION_STRINGENCY=LENIENT

    echo "Marked duplicates for $bam -> $marked_bam"
done

echo "All BAM files processed!"

#DupRadar for PCR artefacts
library(dupRadar)
library(Rsubread)

bam <- "/HANGER/ben/Aligned_files_Bam/V350231822_H06Aligned.sortedByCoord.marked.bam"  
gtf <- "/HANGER/ben/hg38_genome/hg38.genecode.comprehensive-annotation.gtf"  
stranded <- 1  
paired <- 1  
outdir <- "/HANGER/ben/dupRadar_results"  
threads <- 20  

if (!file.exists(bam)) stop(paste("The BAM file does not exist:", bam))
if (!file.exists(gtf)) stop(paste("The GTF file does not exist:", gtf))
if (!dir.exists(outdir)) stop(paste("The output directory does not exist:", outdir))

count <- function(mh, dup) {
    Rsubread::featureCounts(files = bam,
                            annot.ext = gtf,
                            isGTFAnnotationFile = TRUE,
                            GTF.featureType = "CDS",  ## Make sure this corresponds to the correct feature
                            GTF.attrType = "gene_id",  ## Adjusted to match the attribute in your GTF
                            nthreads = threads,
                            isPairedEnd = paired,
                            strandSpecific = stranded,
                            ignoreDup = dup,
                            countMultiMappingReads = mh)
}

counts <- list(
  mhdup = count(mh = TRUE, dup = FALSE),
  mhnodup = count(mh = TRUE, dup = TRUE),
  nomhdup = count(mh = FALSE, dup = FALSE),
  nomhnodup = count(mh = FALSE, dup = TRUE)
)

if (!is.null(counts)) {
    x <- lapply(counts, function(x) {
        N <- sum(x$stat[, 2]) - x$stat[x$stat$Status == "Unassigned_Unmapped", 2]
        x <- data.frame(gene = rownames(x$counts), width = x$annotation$Length[match(rownames(x$counts), x$annotation$GeneID)], counts = x$counts[, 1], RPK = 0, RPKM = 0)
        x$RPK <- x$counts * (10^3/x$width)
        x$RPKM <- x$RPK * (10^6/N)
        return(x)
    })
    
    x <- data.frame(ID = x[[1]]$gene, geneLength = x[[1]]$width,
        allCountsMulti = x[[1]]$counts, filteredCountsMulti = x[[2]]$counts,
        dupRateMulti = (x[[1]]$counts - x[[2]]$counts)/x[[1]]$counts,
        dupsPerIdMulti = x[[1]]$counts - x[[2]]$counts, RPKMulti = x[[1]]$RPK,
        RPKMMulti = x[[1]]$RPKM, allCounts = x[[3]]$counts, filteredCounts = x[[4]]$counts,
        dupRate = (x[[3]]$counts - x[[4]]$counts)/x[[3]]$counts,
        dupsPerId = x[[3]]$counts - x[[4]]$counts, RPK = x[[3]]$RPK,
        RPKM = x[[3]]$RPKM)

    if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)  
    
    png(file = paste0(outdir, "/", gsub("(.*)\\.[^.]+", "\\1", basename(bam)), "_dupRadar_drescatter.png"), width = 1000, height = 1000)
    duprateExpDensPlot(x, main = basename(bam))
    dev.off()

    png(file = paste0(outdir, "/", gsub("(.*)\\.[^.]+", "\\1", basename(bam)), "_dupRadar_ehist.png"), width = 1000, height = 1000)
    expressionHist(x)
    dev.off()

    png(file = paste0(outdir, "/", gsub("(.*)\\.[^.]+", "\\1", basename(bam)), "_dupRadar_drebp.png"), width = 1000, height = 1000)
    par(mar = c(10, 4, 4, 2) + .1)
    duprateExpBoxplot(x, main = basename(bam))
    dev.off()
}

#Differential expression
library(DESeq2)
library(readxl)
library(writexl) 

setwd("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Count matrix/Filtered counts")

file_list <- list.files(pattern = "*.txt")

all_data <- list()

for (file in file_list) {
  data <- read.table(file, header = FALSE, sep = " ", stringsAsFactors = FALSE)
  
  if (ncol(data) != 2) {
    cat("Error: File", file, "does not have exactly 2 columns.\n")
    next  
  }
  
  colnames(data) <- c("Gene_ID", "Count")
  data$Count <- as.numeric(data$Count)
  
  rownames(data) <- data$Gene_ID
  data <- data[, "Count", drop = FALSE] 
  
  all_data[[file]] <- data
}

combined_data <- do.call(cbind, all_data)
combined_data <- apply(combined_data, 2, as.numeric)  

rownames(combined_data) <- rownames(all_data[[1]])  

colnames(combined_data) <- gsub(".txt", "", basename(file_list))

sample_matrix <- read_excel("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Sample_matrix.xlsx")

sample_matrix <- sample_matrix[sample_matrix$SampleID %in% colnames(combined_data), ]

combined_data <- combined_data[, sample_matrix$SampleID]

dds <- DESeqDataSetFromMatrix(countData = combined_data,
                              colData = sample_matrix,
                              design = ~ Batch + Condition) 

dds <- dds[rowSums(counts(dds) >= 10) > 0, ]  

dds <- DESeq(dds)

res_estradiol <- results(dds, contrast = c("Condition", "Estradiol", "Media"))

res_leptin <- results(dds, contrast = c("Condition", "Leptin", "Media"))

res_oxLDL <- results(dds, contrast = c("Condition", "oxLDL", "Media"))

sig_genes <- function(res) {
  res <- res[!is.na(res$padj) & res$padj < 0.05 & abs(res$log2FoldChange) > 0.5, ]
  res$Gene_ID <- rownames(res)  # Add Gene_IDs to the results
  return(res)
}

sig_estradiol <- sig_genes(res_estradiol)
sig_leptin <- sig_genes(res_leptin)
sig_oxLDL <- sig_genes(res_oxLDL)

write_xlsx(list(
  "Estradiol_vs_Media" = as.data.frame(sig_estradiol),
  "Leptin_vs_Media" = as.data.frame(sig_leptin),
  "oxLDL_vs_Media" = as.data.frame(sig_oxLDL)
), path = "DESeq2_Results_Significant_Genes.xlsx")

#Annotate gene names
library(httr)

gene_ids <- c("ENSG00000132274.17", "ENSG00000152409.9")

gene_ids_cleaned <- sub("\\.\\d+$", "", gene_ids)

gene_names <- data.frame(Ensembl_Gene_ID = character(), Gene_Name = character(), stringsAsFactors = FALSE)

for (gene_id in gene_ids_cleaned) {
  
  url <- paste0("https://rest.ensembl.org/lookup/id/", gene_id, "?content-type=application/json")
  
  response <- GET(url)
  
  gene_data <- content(response, "parsed")
  
  gene_name <- ifelse(!is.null(gene_data$display_name), gene_data$display_name, NA)
  
  gene_names <- rbind(gene_names, data.frame(Ensembl_Gene_ID = gene_id, Gene_Name = gene_name))
}

print(gene_names)

write.csv(gene_names, "gene_names.csv", row.names = FALSE)

#Create volcano plots with identified gene names
library(DESeq2)
library(readxl)
library(ggplot2)
library(dplyr)
library(ggrepel)

setwd("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Count matrix/Filtered counts")

file_list <- list.files(pattern = "*.txt")
all_data <- list()

for (file in file_list) {
    data <- read.table(file, header = FALSE, sep = " ", stringsAsFactors = FALSE)
    if (ncol(data) != 2) {
        cat("Skipping", file, "- not 2 columns\n")
        next
    }
    colnames(data) <- c("Gene_ID", "Count")
    data$Count <- as.numeric(data$Count)
    rownames(data) <- data$Gene_ID
    all_data[[file]] <- data[, "Count", drop = FALSE]
}

combined_data <- do.call(cbind, all_data)
combined_data <- apply(combined_data, 2, as.numeric)
rownames(combined_data) <- rownames(all_data[[1]])
colnames(combined_data) <- gsub(".txt", "", basename(file_list))

sample_matrix <- read_excel("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Sample_matrix.xlsx")
sample_matrix <- sample_matrix[sample_matrix$SampleID %in% colnames(combined_data), ]
combined_data <- combined_data[, sample_matrix$SampleID]


dds <- DESeqDataSetFromMatrix(countData = combined_data,
                              colData = sample_matrix,
                              design = ~ Batch + Condition)
dds <- dds[rowSums(counts(dds) >= 10) > 0, ]  
dds <- DESeq(dds)

gene_name_df <- read_excel("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Results/RNAseq/Gene names.xlsx")

plot_volcano <- function(dds, condition, reference, gene_name_df, title) {
    res <- results(dds, contrast = c("Condition", condition, reference))
    res$Gene_ID <- rownames(res)
    res_annotated <- merge(as.data.frame(res), gene_name_df, by = "Gene_ID", all.x = TRUE)
    
    res_annotated <- res_annotated %>%
        filter(!is.na(padj)) %>%
        mutate(Significant = padj < 0.05 & abs(log2FoldChange) > 0.5)
    
    ggplot(res_annotated, aes(x = log2FoldChange, y = -log10(padj))) +
        geom_point(data = subset(res_annotated, !Significant), color = "lightgrey", alpha = 0.6, size = 1.2) +
        geom_point(data = subset(res_annotated, Significant), color = "red", alpha = 0.6, size = 1.2) +
        geom_vline(xintercept = c(-0.5, 0.5), col = "blue", linetype = "dashed") +
        geom_hline(yintercept = -log10(0.05), col = "blue", linetype = "dashed") +
        theme_minimal(base_size = 14) +
        labs(title = title,
             x = "Log2 Fold Change",
             y = "-log10 Adjusted p-value") +
        coord_cartesian(xlim = c(-2, 2), ylim = c(0, 6)) +
        ggrepel::geom_text_repel(
            data = subset(res_annotated, Significant),
            aes(label = `Gene name`),
            size = 3,
            max.overlaps = 50,
            color = "black",
            segment.color = "grey30",  
            segment.alpha = 0.8        
        )
}

plot_volcano(dds, "oxLDL", "Media", gene_name_df, "Volcano Plot - oxLDL vs Media")
plot_volcano(dds, "Estradiol", "Media", gene_name_df, "Volcano Plot - Estradiol vs Media")
plot_volcano(dds, "Leptin", "Media", gene_name_df, "Volcano Plot - Leptin vs Media")

#Clustering expression
library(DESeq2)
library(readxl)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
library(dynamicTreeCut)
library(limma)

setwd("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Count matrix/Filtered counts")

file_list <- list.files(pattern = "*.txt")
all_data <- list()

for (file in file_list) {
  data <- read.table(file, header = FALSE, sep = " ", stringsAsFactors = FALSE)
  if (ncol(data) != 2) {
    cat("Error: File", file, "does not have exactly 2 columns.\n")
    next
  }
  colnames(data) <- c("Gene_ID", "Count")
  data$Count <- as.numeric(data$Count)
  rownames(data) <- data$Gene_ID
  data <- data[, "Count", drop = FALSE]
  all_data[[file]] <- data
}

combined_data <- do.call(cbind, all_data)
combined_data <- apply(combined_data, 2, as.numeric)
rownames(combined_data) <- rownames(all_data[[1]])
colnames(combined_data) <- gsub(".txt", "", basename(file_list))

sample_matrix <- read_excel("C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Sample_matrix.xlsx")
sample_matrix <- sample_matrix[sample_matrix$SampleID %in% colnames(combined_data), ]
combined_data <- combined_data[, sample_matrix$SampleID]

sample_matrix$Condition <- factor(sample_matrix$Condition)
sample_matrix$Batch <- factor(sample_matrix$Batch)

dds <- DESeqDataSetFromMatrix(countData = combined_data,
                              colData = sample_matrix,
                              design = ~ Batch + Condition)
dds <- dds[rowSums(counts(dds) >= 10) > 0, ]
dds <- DESeq(dds)

vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)

vsd_corrected <- removeBatchEffect(vsd_mat, batch = sample_matrix$Batch)

row_var <- apply(vsd_corrected, 1, var)
top_genes <- order(row_var, decreasing = TRUE)[1:1000]
vsd_top <- vsd_corrected[top_genes, ]

sample_dist <- dist(t(vsd_top), method = "euclidean")
hc_samples <- hclust(sample_dist, method = "complete")

sample_clusters <- cutreeDynamic(dendro = hc_samples, distM = as.matrix(sample_dist),
                                 deepSplit = 2, minClusterSize = 2)

annotation_df <- data.frame(
  Condition = sample_matrix$Condition,
  SampleCluster = as.factor(sample_clusters)
)
rownames(annotation_df) <- sample_matrix$SampleID
annotation_df <- annotation_df[colnames(vsd_top), , drop = FALSE]

pheatmap(vsd_top,
         cluster_rows = TRUE,
         cluster_cols = hc_samples,
         annotation_col = annotation_df,
         show_rownames = FALSE,
         scale = "row",
         color = colorRampPalette(rev(brewer.pal(9, "RdBu")))(255),
         main = "Clustering")

#Venn diagram for shared expression
library(readxl)
library(VennDiagram)
library(tidyverse)

file_path <- "C:/Users/topbe075/OneDrive - University of Otago/MyFiles/PhD/Janice downloads/Overlapping genes.xlsx"
gene_lists <- read_excel(file_path)

colnames(gene_lists)

oxLDL_genes <- na.omit(gene_lists$`oxLDL Gene name`)
estradiol_genes <- na.omit(gene_lists$`Estradiol Gene name`)
leptin_genes <- na.omit(gene_lists$`Leptin Gene name`)

length(oxLDL_genes)
length(estradiol_genes)
length(leptin_genes)

venn.plot <- venn.diagram(
    x = list(
        oxLDL = oxLDL_genes,
        Estradiol = estradiol_genes,
        Leptin = leptin_genes
    ),
    filename = NULL,
    fill = c("red", "blue", "green"),
    alpha = 0.5,
    cat.col = "black",
    cex = 1.5,
    cat.cex = 1.2,
    cat.dist = c(0.1, 0.1, 0.1),  
    margin = 0.1
)

grid.draw(venn.plot)

#Plotting functional pathways associated with differential expression
data_new5 <- data.frame(
    Term = c("Hypoxia", "Interferon Gamma Response"),
    Adjusted_P_value = c(0.049016446, 0.049016446),
    Combined_Score = c(27.67639763, 27.67639763),
    Genes = c("KDM3A;CAVIN1;CXCR4;KLHL24;FOXO3;PNRC1", "CD86;TXNIP;IRF8;ITGB7;DDX60;PARP14")
)

data_new5$P_value_category <- cut(
    data_new5$Adjusted_P_value,
    breaks = c(-Inf, 1e-09, 1e-08, 1e-07, 1e-06, 1e-05, 1e-04, 1e-03, 1e-02, 0.05, Inf),
    labels = c("p < 1e-09", "1e-09 to 1e-08", "1e-08 to 1e-07", "1e-07 to 1e-06", 
               "1e-06 to 1e-05", "1e-05 to 1e-04", "1e-04 to 1e-03", "1e-03 to 1e-02", 
               "1e-02 to 0.05", "p > 0.05"),
    right = TRUE
)

ggplot(data_new5, aes(x = Combined_Score, y = reorder(Term, Combined_Score), color = P_value_category)) +  
    geom_point(size = 4) +  
    scale_color_manual(
        values = c("p < 1e-09" = "red", "1e-09 to 1e-08" = "orange", "1e-08 to 1e-07" = "yellow", 
                   "1e-07 to 1e-06" = "green", "1e-06 to 1e-05" = "blue", "1e-05 to 1e-04" = "purple", 
                   "1e-04 to 1e-03" = "pink", "1e-03 to 1e-02" = "brown", "1e-02 to 0.05" = "grey", 
                   "p > 0.05" = "lightblue"),  
        name = "Adjusted P-value"
    ) +
    scale_x_continuous(
        trans = "log10",
        breaks = c(1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 1500, 2000, 3000, 6000),
        labels = c("1", "2", "5", "10", "20", "50", "100", "200", "500", "1000", "1500", "2000", "3000", "6000"),
        limits = c(1, 6000)
    ) +
    labs(title = "Function Terms vs Combined Score",
         x = "Combined Score (Log Scale)",
         y = "Function Term",
         color = "Adjusted P-value") +
    theme_minimal() +  
    theme(axis.text.x = element_text(angle = 45, hjust = 1), 
          plot.margin = margin(10, 50, 10, 10),  
          plot.title = element_text(hjust = 0.5),
          legend.position = "right",
          legend.key.width = unit(0.5, "cm"),  
          legend.key.height = unit(0.5, "cm"), 
          plot.background = element_rect(fill = "white", color = NA),
          panel.background = element_rect(fill = "white", color = NA)) +
    geom_text(aes(label = Genes), 
              hjust = -0.2,  
              vjust = 0.5,  
              size = 3, 
              color = "black", 
              check_overlap = TRUE,  
              nudge_x = 0.2)
